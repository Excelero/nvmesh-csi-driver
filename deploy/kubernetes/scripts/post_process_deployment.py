#!/usr/bin/env python

import yaml
import os
import subprocess

generated_yaml_file_comment = [
	"# DO NOT EDIT THIS FILE\n",
	"# This file is auto-generated by deploy/kubernetes/post_process_deployment.py\n"
]

k8s_api_compatibility = {
	'1.22': {
		'storage.k8s.io/v1beta1': 'storage.k8s.io/v1'
	},
	'1.25': {
		'policy/v1beta1': 'deprecated',
		'storage.k8s.io/v1beta1': 'storage.k8s.io/v1', 
		'node.k8s.io/v1beta1': 'node.k8s.io/v1', 
		'events.k8s.io/v1beta1': 'events.k8s.io/v1' 
	} 
}


def load_yaml_file(filename):
    with open(filename, 'r') as f:
        return list(yaml.safe_load_all(f))

def write_yaml_file(docs, output_file):
    with open(output_file, 'w') as f:
        f.writelines(generated_yaml_file_comment)
        yaml.dump_all(docs, f)

def update_apis_per_k8s_version(k8s_version, deployment_template):
	apis_to_update = k8s_api_compatibility[k8s_version]

	deployment = []

	for obj in deployment_template:
		if not obj:
			# remove empty objects
			continue
		old_api_version = obj.get('apiVersion')
		if old_api_version in apis_to_update:
			new_api_or_action = apis_to_update[obj['apiVersion']]
			if new_api_or_action == 'deprecated':
				# remove objects with deprecated API 
				continue
			obj['apiVersion'] = new_api_or_action
			print('updated %s to %s for object %s' %(old_api_version, obj['apiVersion'], obj['metadata']['name']))

		deployment.append(obj)

	return deployment

def create_deployment_files_for_newer_k8s_versions():
	for k8s_version in k8s_api_compatibility.keys():
		deployment_template = load_yaml_file('../deployment.yaml')
		updated_deployment = update_apis_per_k8s_version(k8s_version, deployment_template)
		new_deployment_file_name = '../deployment_k8s_%s.yaml' % k8s_version
		write_yaml_file(updated_deployment, new_deployment_file_name)

def update_dev_deployment():
	# Get target k8s version for dev from values-dev.yaml
	dev_options = load_yaml_file('../helm/nvmesh-csi-driver/values-dev.yaml')[0]
	k8s_version = dev_options.get('k8sVersion')

	# update the apis in deployment_dev.yaml
	deployment_template = load_yaml_file('../deployment_dev.yaml')
	updated_deployment = update_apis_per_k8s_version(k8s_version, deployment_template)
	new_deployment_file_name = '../deployment_dev.yaml'
	write_yaml_file(updated_deployment, new_deployment_file_name)

if __name__ == '__main__':
	create_deployment_files_for_newer_k8s_versions()
	update_dev_deployment()