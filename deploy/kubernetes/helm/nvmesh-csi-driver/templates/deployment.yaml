#
# NVMesh CSI Controller Driver StatefulSet Deployment
#

# TODO: remove "hard-coded" namespace field.
# let the customer decide on which namespace they want the driver installed
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: {{ template "nvmesh-csi-driver.fullname" . }}-controller
  namespace: {{ template "nvmesh-csi-driver.namespace" . }}
spec:
  serviceName: {{ template "nvmesh-csi-driver.fullname" . }}
  selector:
    matchLabels:
      {{ include "nvmesh-csi-driver.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: controller
  replicas: {{ .Values.controller.replicaCount }}
  template:
    metadata:
      labels:
        {{ include "nvmesh-csi-driver.labels" . | nindent 8 }}
        app.kubernetes.io/component: controller
      {{- with .Values.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.controller.tolerations }}
      tolerations:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      serviceAccount: {{ template "nvmesh-csi-driver.serviceAccountName" . }}
      containers:
        # NVMesh Driver
        - name: nvmesh-csi-driver
          # if we use image tag :latest kubernetes will try to fetch from Docker Hub (hub.docker.com)
          image: "{{ .Values.image.repository }}:{{ .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: DRIVER_TYPE
              value: "Controller"
            - name: SOCKET_PATH
              value: unix:///csi/ctrl-csi.sock
            - name: MANAGEMENT_SERVERS
              valueFrom:
                configMapKeyRef:
                  name: {{ template "nvmesh-csi-driver.fullname" . }}-config
                  key: management.servers
            - name: MANAGEMENT_PROTOCOL
              valueFrom:
                configMapKeyRef:
                  name: {{ template "nvmesh-csi-driver.fullname" . }}-config
                  key: management.protocol
            - name: MANAGEMENT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ template "nvmesh-csi-driver.fullname" . }}-credentials
                  key: username
            - name: MANAGEMENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "nvmesh-csi-driver.fullname" . }}-credentials
                  key: password
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: plugin-socket-dir
              mountPath: /csi
        # Provisioner
        - name: csi-provisioner
          image: "{{ .Values.csiExternalProvisioner.repository }}:{{ .Values.csiExternalProvisioner.tag }}"
          args:
            - "--provisioner={{ .Values.driverName }}"
            - "--csi-address=/csi/ctrl-csi.sock"
            - "--v=5"
          imagePullPolicy: "{{ .Values.csiExternalProvisioner.pullPolicy }}"
          volumeMounts:
            - name: plugin-socket-dir
              mountPath: /csi
        # Attacher
        - name: csi-attacher
          image: "{{ .Values.csiExternalAttacher.repository }}:{{ .Values.csiExternalAttacher.tag }}"
          imagePullPolicy: "{{ .Values.csiExternalAttacher.pullPolicy }}"
          args:
            - "--v=5"
            - "--csi-address=/csi/ctrl-csi.sock"
          volumeMounts:
            - name: plugin-socket-dir
              mountPath: /csi
        # Resizer
        - name: csi-resizer
          image: "{{ .Values.csiExternalResizer.repository }}:{{ .Values.csiExternalResizer.tag }}"
          args:
            - "--v=5"
            - "--csi-address=/csi/ctrl-csi.sock"
            - "--leader-election"
          imagePullPolicy: "{{ .Values.csiExternalResizer.pullPolicy }}"
          volumeMounts:
            - name: plugin-socket-dir
              mountPath: /csi
      volumes:
        - name: config-volume
          configMap:
            name: {{ template "nvmesh-csi-driver.fullname" . }}-config
        - name: plugin-socket-dir
          hostPath:
            path: /var/lib/kubelet/plugins/{{ .Values.driverName }}/
            type: DirectoryOrCreate
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: Directory
---
#
# NVMesh Node Driver DaemonSet (Per Node) Deployment
#

kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: {{ template "nvmesh-csi-driver.fullname" . }}-node-driver
  namespace: {{ template "nvmesh-csi-driver.namespace" . }}
spec:
  selector:
    matchLabels:
      {{ include "nvmesh-csi-driver.selectorLabels" . | nindent 6}}
      app.kubernetes.io/component: node-driver
  template:
    metadata:
      labels:
        {{ include "nvmesh-csi-driver.labels" . | nindent 8 }}
        app.kubernetes.io/component: node-driver
      {{- with .Values.annotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      serviceAccount: {{ template "nvmesh-csi-driver.serviceAccountName" . }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      hostNetwork: true
      {{- with .Values.nodeDriver.tolerations }}
      tolerations:
        {{ toYaml . | nindent 8 }}
      {{- end }}
      containers:
        # NVMesh Driver
        - name: nvmesh-csi-driver
          # if we use image tag :latest kubernetes will try to fetch from Docker Hub (hub.docker.com)
          image: "{{ .Values.image.repository }}:{{ .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          env:
            - name: DRIVER_TYPE
              value: "Node"
            - name: SOCKET_PATH
              value: unix:///csi/csi.sock
            - name: MANAGEMENT_SERVERS
              valueFrom:
                configMapKeyRef:
                  name: {{ template "nvmesh-csi-driver.fullname" . }}-config
                  key: management.servers
            - name: MANAGEMENT_PROTOCOL
              valueFrom:
                configMapKeyRef:
                  name: {{ template "nvmesh-csi-driver.fullname" . }}-config
                  key: management.protocol
            - name: MANAGEMENT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ template "nvmesh-csi-driver.fullname" . }}-credentials
                  key: username
            - name: MANAGEMENT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "nvmesh-csi-driver.fullname" . }}-credentials
                  key: password
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: plugin-socket-dir
              mountPath: /csi
            - name: pods-mount-dir
              mountPath: /var/lib/kubelet/
              # needed so that any mounts setup inside this container are
              # propagated back to the host machine.
              mountPropagation: "Bidirectional"
{{ if .Values.systemdHost }}
            - name: systemd-journal
              mountPath: /run/systemd/journal
{{ end }}
            - name: device-dir
              mountPath: /dev
            - name: host-bin
              mountPath: /host/bin
            - name: var-opt-nvmesh
              mountPath: /var/opt/NVMesh
            - name: opt-nvmesh
              mountPath: /opt/NVMesh
        # Registrar
        - name: csi-driver-registrar
          image: "{{ .Values.csiDriverRegistrar.repository }}:{{ .Values.csiDriverRegistrar.tag }}"
          imagePullPolicy: "{{ .Values.csiDriverRegistrar.pullPolicy }}"
          args:
            - "--csi-address=/csi/csi.sock"
            - "--kubelet-registration-path=/var/lib/kubelet/plugins/{{ .Values.driverName }}/csi.sock"
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /registration/{{ .Values.driverName }} /registration/{{ .Values.driverName }}-reg.sock"]
          volumeMounts:
            - name: plugin-socket-dir
              mountPath: /csi
            - name: registration-dir
              mountPath: /registration
      volumes:
        - name: config-volume
          configMap:
            name: {{ template "nvmesh-csi-driver.fullname" . }}-config
        - name: plugin-socket-dir
          hostPath:
            path: /var/lib/kubelet/plugins/{{ .Values.driverName }}/
            type: DirectoryOrCreate
        - name: registration-dir
          hostPath:
            path: /var/lib/kubelet/plugins_registry/
            type: Directory
        - name: pods-mount-dir
          hostPath:
            path: /var/lib/kubelet/
            type: Directory
{{ if .Values.systemdHost }}
        - name: systemd-journal
          hostPath:
            path: /run/systemd/journal
{{ end }}
        - name: device-dir
          hostPath:
            path: /dev
        - name: host-bin
          hostPath:
            path: {{ .Values.hostBinariesPath }}
        - name: var-opt-nvmesh
          hostPath:
            path: /var/opt/NVMesh
        - name: opt-nvmesh
          hostPath:
            path: /opt/NVMesh
